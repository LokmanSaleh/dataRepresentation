package com.automl.datarepresentation;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.sql.Array;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import com.automl.datarepresentation.bd.SQLrequest;
import com.automl.datarepresentation.bean.Column;
import com.automl.datarepresentation.bean.Table;
import com.automl.datarepresentation.service.SQLAutoGenerated;
import com.mysql.cj.jdbc.result.ResultSetMetaData;

/**
 * Hello world!
 *
 */
public class DataBaseSchema {

	public DataBaseSchema(Connection con, String database) {
		visualizeDataBaseSchema(con, database);
	}

	void visualizeDataBaseSchema (Connection con, String database){

		try {
			PreparedStatement stmt = con.prepareStatement(SQLrequest.GET_RELATIONAL_DB_STUCTURE);
			
			stmt.setString(1, database);
			stmt.setString(2, database);
			stmt.setString(3, database);
			stmt.setString(4, database);

			ResultSet rs = stmt.executeQuery();

			// nom du table, nom du colomn, et contenue de colomn
			TreeMap<String, Table> tables = new TreeMap<String, Table>();

			// TODO: a amliorer
			while (rs.next()) {

				if (tables.get(rs.getString("tableName")) == null) {

					tables.put(rs.getString("tableName"), new Table(rs.getString("tableName")));

					tables.get(rs.getString("tableName")).getColumns().put(rs.getString("columnName"),
							new Column(rs.getString("tablename"), rs.getString("columnName"), rs.getBoolean("isforeignkey"),
									rs.getString("parentTable"), rs.getString("parentColumn")));

				} else {
					tables.get(rs.getString("tableName")).getColumns().put(rs.getString("columnName"),
							new Column(rs.getString("tablename"), rs.getString("columnName"), rs.getBoolean("isforeignkey"),
									rs.getString("parentTable"), rs.getString("parentColumn")));
				}

			}

				        
 		    JFrame frame = new JFrame("Auto generated SQL request");
		    
		    JPanel tablesContainer = new JPanel();
		    
		    // create panel for each table in the structure
			for (Map.Entry<String, Table> entry : tables.entrySet()) {

				Table table = entry.getValue();
				
				table.createPanelForTable();
				tablesContainer.add(table.getPanel());
			}
			
			JPanel buttonJPanel = new JPanel();
			JButton button = new JButton("create SQL request");
			
			// when clicking 
			button.addActionListener(new ActionListener() {
				
				@Override
				public void actionPerformed(ActionEvent e) {
					
					SQLAutoGenerated.generateRequest(tables);
					
					JOptionPane.showMessageDialog(frame, SQLAutoGenerated.getRequest());
							
					try {
						
						Statement stmt = con.createStatement();

						ResultSet rs = stmt.executeQuery(SQLAutoGenerated.getRequest());
						
						java.sql.ResultSetMetaData rsmd = rs.getMetaData();
						
						ArrayList<String> column = new ArrayList<>();
						ArrayList<ArrayList<String>> dataArrayList = new ArrayList<ArrayList<String>>();
						
						// The column count starts from 1
						for (int i = 1; i <= rsmd.getColumnCount(); i++ ) {
							
						  column.add(rsmd.getColumnName(i));
						  // Do stuff with name
						}
						
						int j=1;
						while (rs.next()) {
							ArrayList<String> ligne = new ArrayList<>();
							
							for (int i = 1; i <= rsmd.getColumnCount(); i++ ) {
								
								  ligne.add(rs.getString(i));
 								}
							
							dataArrayList.add(ligne);
						}
						
						String[][] data = new String[dataArrayList.size()][rsmd.getColumnCount()];
						
						for (int i = 0; i<dataArrayList.size();i++)
							for (j=0 ; j<rsmd.getColumnCount(); j++)
								data[i][j] = dataArrayList.get(i).get(j);
						
					    JFrame f=new JFrame();    
					    JTable jt=new JTable(data,column.toArray());    
					    //jt.setBounds(30,40,200,300);          
					    JScrollPane sp=new JScrollPane(jt);    
					    f.add(sp);          
					    f.setSize(300,400);    
					    f.setVisible(true);    
						
					} catch (SQLException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

					
				}
			});
			
			buttonJPanel.add(button);
			
			tablesContainer.add(buttonJPanel);
			
		    frame.getContentPane().add(tablesContainer);
		    //frame.getContentPane().add(buttonJPanel);

		    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		    frame.pack();
		    frame.setVisible(true);
		    
		    //TODO: clean here
		    frame.addWindowListener(new WindowListener() {
						
				@Override
				public void windowClosed(WindowEvent e) {
					// TODO Auto-generated method stub
					try {
						con.close();
					} catch (SQLException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}

				@Override
				public void windowOpened(WindowEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void windowClosing(WindowEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void windowIconified(WindowEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void windowDeiconified(WindowEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void windowActivated(WindowEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void windowDeactivated(WindowEvent e) {
					// TODO Auto-generated method stub
					
				}
 
			});
		    
		    
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
 
	}
}
